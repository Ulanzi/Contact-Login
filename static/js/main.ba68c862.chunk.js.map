{"version":3,"sources":["components/Header/Header.module.css","reportWebVitals.js","api/Api.ts","redux/Content-reducer.ts","redux/Auth-reducer.ts","redux/App-reducer.ts","redux/redux-store.ts","assets/images/preloader06.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.tsx","components/Content/ContentInfo/ProfileDataForm.tsx","components/Content/ContentInfo/ContentInfo.tsx","components/Content/Content.tsx","hoc/withAuthRedirect.tsx","components/Content/ContentContainer.tsx","components/Header/Header.tsx","components/Header/Header-Container.tsx","Utils/validators/validators.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Content/ContentInfo/ContentInfo.module.css"],"names":["module","exports","ResultCodesEnum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","profile","put","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","SET_USER_PROFILE","initialState","getUserProfile","dispatch","a","response","data","type","contentReducer","state","action","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","id","login","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","resultCode","getCaptchaUrl","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","contentPage","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Preloader","src","preloader","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Input","props","input","restProps","ProfileDataFormReduxForm","reduxForm","handleSubmit","onSubmit","style","formSummaryError","Object","keys","contacts","map","key","classes","contact","Field","placeholder","name","component","ProfileData","isOwner","buttonEdit","onClick","goToEditMode","fullName","contactTitle","contactValue","Contact","ContentInfo","useState","editMode","setEditMode","descriptionBlock","initialValues","formData","saveProfile","Content","mapStateToPropsForRedirect","ContentContainer","this","match","params","authorizedUserId","refreshProfile","prevProps","prevState","React","Component","connect","getState","stopSubmit","_error","messages","Promise","reject","WrappedComponent","to","useMatch","Header","header","loginBlock","logout","loginColor","HeaderContainer","required","value","LoginReduxForm","loginPadding","formPadding","validate","message","length","replace","SubMenu","Menu","Layout","Sider","App","initializeApp","padding","width","mode","defaultOpenKeys","height","icon","UserOutlined","title","Item","minHeight","path","element","promise","all","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba68c862.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1N7Sq\",\"loginBlock\":\"Header_loginBlock__1SnCR\",\"loginColor\":\"Header_loginColor__18Qxq\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\n type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n/*instance это базовая настройка запроса*/\r\nexport const instance = axios.create({\r\n\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { \"api-key\" : \"237de4a2-60b4-4d3d-a09d-4c3e2f0c5c52\"}\r\n\r\n});\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId);\r\n    },\r\n\r\n    saveProfile(profile: ProfileType){\r\n        return instance.put<APIResponseType>(`profile`, profile);\r\n    },\r\n\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`);      /*для get и delete запроса нельза отправлять данные*/\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha});    /*для post и put можно отпр данные например email, password*/\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);      /*для get и delete запроса нельза отправлять данные*/\r\n    }\r\n}\r\n\r\n\r\n","import {profileAPI} from \"../api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport actions, { FormAction } from \"redux-form/lib/actions\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    profile: null as ProfileType | null,\r\n\r\n};\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst contentReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile: action.profile};\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile})\r\n\r\n/*это thunk*/\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch: any) => {\r\n    let response = await profileAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data)); /*диспатчим не сам actioncreator а его вызов*/\r\n    }\r\n\r\n\r\n    /*это thunk для отправки редактированного профайла*/\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.id;\r\n\r\n    const response = await profileAPI.saveProfile(profile);\r\n\r\n    if (response.data.resultCode === 0) {\r\n       dispatch(getUserProfile(userId)); /*диспатчим не сам actioncreator а его вызов*/\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}));\r\n        return Promise.reject(response.data.messages[0]) /*ошибка при нажатии на save из промиса из onSubmit из ContentInfo если неверный контакт*/\r\n    }\r\n}\r\n\r\nexport default contentReducer;","import {authAPI, securityAPI} from \"../api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA'; //создаем константы type что бы не ошибиться с наименованиями и добавляем auth/ для уникальности\r\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nexport type InitialStateType2 = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        /*payload раньше назывался data*/\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataActionPayloadType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n})\r\n\r\ntype GetCaptchaUrlSuccessActionType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\r\n    payload: {captchaUrl: string}\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS,\r\n    payload: {captchaUrl}\r\n})\r\n\r\n/*это thunk*/\r\n/*тут мы отправляем запрос на me и если мы зологинены то возвр resultCode === 0\r\nи мы сетаем наш state с данными пользователя и меняется isAuth: false на isAuth: true*/\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));/*диспатчим не сам actioncreator а его вызов*/\r\n    }\r\n}\r\n\r\n/*это thunk для логинизации*/\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any) => async (dispatch: any) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            // success, get auth data\r\n            dispatch(getAuthUserData()); /*диспатчим не сам actioncreator а его вызов и если ответ будет с ошибкой запустится stopSubmit*/\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n\r\n            /*тут указываем какую форму мы стопаем и указываем ошибку на все поля с помощью _email*/\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n}\r\n\r\n/*это thunk для captcha*/\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl));/*диспатчим не сам actioncreator а его вызов*/\r\n\r\n}\r\n\r\n/*это thunk для вылогинизации*/\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));/*диспатчим не сам actioncreator а его вызов*/\r\n        }\r\n}\r\n\r\nexport default authReducer;","import {getAuthUserData} from \"./Auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'; //создаем константы type что бы не ошибиться с наименованиями\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state:InitialStateType = initialState, action: any): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n\r\n        case INITIALIZED_SUCCESS:\r\n            return  {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n            default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => ({ type: INITIALIZED_SUCCESS})\r\n\r\n/*это thunk*/\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise =  dispatch(getAuthUserData());\r\n\r\nPromise.all ([promise])\r\n    .then( () => { dispatch (initializedSuccess()) })  /*когда getAuthUserData получит результат запустится initializedSuccess */\r\n\r\n}\r\n\r\nexport default appReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport contentReducer from \"./Content-reducer\";\r\nimport authReducer from \"./Auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./App-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    contentPage: contentReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n//так создаем стор чтобы подключить расширение redux devtools\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\nexport default store;","export default __webpack_public_path__ + \"static/media/preloader06.72627050.svg\";","import preloader from \"../../../assets/images/preloader06.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <img src={preloader}/>\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children, ...props}) => {\r\n    /*отдельно вынесли мета тачед плюс мета эррор*/\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children} {/*общий код для Textarea и Input одинаков и именно в этом месте поставл кастомные чилдрены Textarea и Input*/}\r\n            </div>\r\n            { hasError && <span>{error}</span> }  {/*если в мета был зафиксирован тачед и есть еррор то мы его покажем*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*хитрая ситуация мы достаем input и meta а оставшиеся данные деструктуризируем через ...props*/\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n/*также создаем кастомный инпут*/\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/FormsControls/FormsControls\";\nimport classes from './ContentInfo.module.css';\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport { ProfileType } from \"../../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit} >\n        <div >\n        <div > <button>save</button> </div>\n        {error && <div className={style.formSummaryError}> {error} </div>} {/*если в пропсах есть ошибка то мы покажем props.error*/}\n\n        <div>\n            <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={classes.contact}>\n            <b>{key}: <Field placeholder={key} name={\"contacts.\" + key} component={Input}/></b>\n            </div>\n        })} {/*Object.keys пробегается по объекту contacts и мы мапим компоненту Contact на базе каждого значения*/}\n        </div>\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'}) (ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport classes from './ContentInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n\r\n    isOwner: boolean\r\n\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ContentInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); /*с помощью хука создоем LocalState для editMode*/\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        ) /*при нажатии на кнопку save editMode меняется на false и режим редактирования выключается*/\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n\r\n                {editMode ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <div className={classes.profile}><ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={props.profile} isOwner={props.isOwner}/></div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return <div>\r\n        {props.isOwner && <div className={classes.buttonEdit}>\r\n            <button onClick={props.goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b> : {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b> : {Object.keys(props.profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key as keyof ContactsType]}/>\r\n        })} {/*Object.keys пробегается по объекту contacts и мы мапим компоненту Contact на базе каждого значения*/}\r\n        </div>\r\n    </div>\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.contact}><b>{contactTitle}</b> : {contactValue} </div>\r\n}\r\n\r\nexport default ContentInfo;","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport ContentInfo from \"./ContentInfo/ContentInfo\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Content:React.FC<PropsType> = (props) => {\r\n    return (\r\n    <div>\r\n\r\n        <ContentInfo isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     saveProfile={props.saveProfile}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content;","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n\r\nexport function withAuthRedirect <WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport Content from \"./Content\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, saveProfile} from '../../redux/Content-reducer';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {useMatch} from \"react-router-dom\";\r\n\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n    match: any\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & PathParamsType;\r\n\r\nclass ContentContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n\r\n        let userId = this.props.match ? this.props.match.params.userId : this.props.authorizedUserId;\r\n        this.props.getUserProfile(userId);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match != prevProps.match) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Content {...this.props}\r\n                     profile = {this.props.profile}\r\n                     isOwner = {!this.props.match}/> )\r\n    }\r\n}\r\n\r\nconst ProfileURLMatch = (props: PropsType) => {\r\n    const match = useMatch('/profile/:userId/');\r\n    return <ContentContainer {...props} match = {match} />;\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.contentPage.profile,\r\n    authorizedUserId: state.auth.id, /*тут мы берем наш userId */\r\n    isAuth: state.auth.isAuth /*тут мы берем инфу авторизованы или нет */\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, saveProfile}),\r\n    withAuthRedirect,\r\n)(ProfileURLMatch)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nlet Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return <header className={classes.header}>\r\n\r\n        <div className={classes.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to=\"/login\"><h2 className={classes.loginColor}>Login</h2></NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout} from \"../../redux/Auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, { logout}) (HeaderContainer);","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\n/*функция про обязательное поле*/\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\n/*деструктуризация вместо props пишем что нам нужно*/\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    debugger\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                Здравствуйте!\r\n            </div>\r\n            <div className={style.loginPadding}>\r\n                Для входа на сайт, пожалуйста используйте следущие данные:\r\n            </div>\r\n            <div>\r\n                Email:  serj.molotok@gmail.com\r\n            </div>\r\n            <div>\r\n                Password:  yH565vD\r\n            </div>\r\n            <div className={style.formPadding}>\r\n                <Field placeholder={\"Email\"} validate={[required]} name={\"email\"} component={Input}/> {/*используем кастомный инпут*/}\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} validate={[required]} name={\"password\"} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n            <div> {captchaUrl && <img src={captchaUrl} /> } </div>\r\n            <div> {captchaUrl &&  <Field placeholder={\"Symbols from image\"} validate={[required]} name={\"captcha\"} component={Input}/>} </div>\r\n            {error && <div className={style.formSummaryError}> {error} </div>} {/*если в пропсах есть ошибка то мы покажем props.error*/}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'}) (LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\n/*onSubmit сюда приходят все собранные данные из форм*/\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n    /*если в пропсах придет что мы залогинены тогда мы делаем редирект*/\r\n    if (props.isAuth) {\r\n        return  <Navigate replace to=\"/profile\" />\r\n    }\r\n    /* а если в пропсах придет что мы НЕ залогинены тогда мы отправимся в поле логинизации*/\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\nisAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect (mapStateToProps,{login}) (Login);","import React, {Component} from 'react';\nimport './App.css';\nimport {NavLink, Route, Routes} from \"react-router-dom\";\nimport ContentContainer from \"./components/Content/ContentContainer\";\nimport HeaderContainer from \"./components/Header/Header-Container\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport 'antd/dist/antd.css';\nimport {initializeApp} from \"./redux/App-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {Layout, Menu} from 'antd'\nimport {UserOutlined} from '@ant-design/icons'\nimport { AppStateType } from './redux/redux-store';\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst {SubMenu} = Menu\nconst {Content, Sider} = Layout\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    /*если мы не проинициализировались тогда верни крутилку прелоадер*/\n    render() {\n        if (!this.props.initialized) { return <Preloader/> }\n\n        return (\n            <Layout>\n                <HeaderContainer/>\n\n                <Content style={{padding: '0 50px'}}>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                defaultOpenKeys={['sub1']}\n                                style={{height: '100%'}}>\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Menu\">\n                                    <Menu.Item key=\"1\"> <NavLink to=\"/profile\">Contacts</NavLink></Menu.Item>\n                                </SubMenu>\n\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n\n                            <Routes>\n                                <Route path=\"/profile/*\"\n                                       element={<ContentContainer/>}/>\n\n                                <Route path=\"/\"\n                                       element={<LoginPage/>}/>\n\n                                <Route path=\"/login\"\n                                       element={<LoginPage/>}/>\n\n                                <Route path=\"/profile/:userId\"\n                                       element={<ContentContainer/>}/>\n                            </Routes>\n\n                        </Content>\n                    </Layout>\n                </Content>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({initialized: state.app.initialized})\n\nexport default connect(mapStateToProps, {initializeApp})(App);","import reportWebVitals from './reportWebVitals';\nimport store from \"./redux/redux-store\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store}> {/*все внутренние компоненты будут иметь доступ к context*/}\n                <App />\n                </Provider>\n            </BrowserRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1ky8C\",\"error\":\"FormsControls_error__1lQbg\",\"formSummaryError\":\"FormsControls_formSummaryError__1W8gQ\",\"formFullName\":\"FormsControls_formFullName__2FBfg\",\"formPadding\":\"FormsControls_formPadding__2diYd\",\"loginPadding\":\"FormsControls_loginPadding__1yifC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ContentInfo_descriptionBlock__1j1tJ\",\"center\":\"ContentInfo_center__1tqrK\",\"mainPhoto\":\"ContentInfo_mainPhoto__36zjo\",\"InputMainPhoto\":\"ContentInfo_InputMainPhoto__24Nhd\",\"headerPhoto\":\"ContentInfo_headerPhoto__Mmajv\",\"buttonEdit\":\"ContentInfo_buttonEdit__3JQ2s\",\"profile\":\"ContentInfo_profile__2NwsM\",\"contact\":\"ContentInfo_contact__LlM3p\",\"paddingStatus\":\"ContentInfo_paddingStatus__Ye8E8\",\"fullName\":\"ContentInfo_fullName__2biLo\"};"],"sourceRoot":""}